---
blueprint:
  name: Z2M - Philips Hue remote for lights
  description: |
    Control a light with an Philips Hue remote
  domain: automation
  input:
    remote:
      name: Philips Hue dimmer action
      description: >
        This must be an "action" event provided by zigbee2mqtt. For example "event.living_dimmer_action"
      selector:
        entity:
          filter:
            - integration: mqtt
              domain: event
    light:
      name: Light
      description: The light(s group) you want to control
      selector:
        target:
          entity:
            domain: light
    step:
      name: Dimming step in percent
      default: 10
      selector:
        number:
          min: 0.0
          max: 50.0
          mode: slider
          step: 1.0
          unit_of_measurement: "%"

mode: restart
max_exceeded: silent

trigger:
  - platform: state
    entity_id: !input remote
    not_from:
      - unavailable
      - unknown

action:
  - variables:
      event: "{{ trigger.to_state.attributes.event_type | default('unknown', true) }}"
      button: "{{ trigger.to_state.attributes.button | default('unknown') }}"
      step: !input step
      negative_step: "{{ -1 * (step | int) }}"

  - choose:
      # ---------------------------- TURN ON OR OFF ---------------------------- #
      - conditions:
          - condition: template
            value_template: "{{ event == 'press' and button == 'on' }}"
        sequence:
          - service: light.turn_on
            target: !input light
            data:
              transition: 1
      - conditions:
          - condition: template
            value_template: "{{ event == 'press' and button == 'off' }}"
        sequence:
          - service: light.turn_off
            target: !input light
            data: {}
      # ---------------------------- INCREASE OR DECREASE BRIGHTNESS ---------------------------- #
      # - conditions:
      #     - '{{ event == 2001 }}'
      #   sequence:
      #     - repeat:
      #         until:
      #           - condition: template
      #             value_template: '{{ event == 2003 }}'
      #         sequence:
      #           - service: light.turn_on
      #             target: !input light
      #             data:
      #               brightness_step_pct: 10
      #               transition: 0.5
      #           - delay: '0.2'
      # - conditions:
      #     - '{{ event == 3001 }}'
      #   sequence:
      #     - repeat:
      #         until:
      #           - condition: template
      #             value_template: '{{ event == 3003 }}'
      #         sequence:
      #           - service: light.turn_on
      #             target: !input light
      #             data:
      #               brightness_step_pct: -10
      #               transition: 0.5
      #           - delay: '1'
      - conditions:
          - condition: template
            value_template: "{{ event == 'press' and button == 'up' }}"
        sequence:
          - service: light.turn_on
            target: !input light
            data:
              brightness_step_pct: "{{ step }}"
              transition: 0.5
      - conditions:
          - condition: template
            value_template: "{{ event == 'press' and button == 'down' }}"
        sequence:
          - service: light.turn_on
            target: !input light
            data:
              brightness_step_pct: "{{ negative_step }}"
              transition: 0.5
